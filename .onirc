" Oni vimL config

"===================================PLUGINS=====================================
call plug#begin()
"====================================COSMETIC===================================
Plug 'reedes/vim-colors-pencil'
Plug 'luochen1990/rainbow'
Plug 'Yggdroot/indentLine'
Plug 'justinmk/vim-sneak'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:rainbow_active = 1
"====================================UTILITY====================================
Plug 'jiangmiao/auto-pairs'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tyru/open-browser.vim'
" tpope shrine.
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-dadbod'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
" Disable netrw gx mapping.
let g:netrw_nogx = get(g:, 'netrw_nogx', 1)
nmap gx <Plug>(openbrowser-open)
vmap gx <Plug>(openbrowser-open)
augroup magit
  au!
  au FileType magit nn <buffer> <TAB> za
augroup END
"====================================BUILD/TEST=================================
Plug '~/dev/ale'
Plug 'janko-m/vim-test'

let g:ale_linters = {
      \ 'elixir': ['credo', 'dialyxir'],
      \ 'haskell': ['stack-ghc-mod', 'hlint'],
      \ 'typescript': ['tsserver', 'tslint'],
      \ 'typescript.tsx': ['tsserver', 'tslint'],
      \ 'elm': ['make'],
      \ 'reason': ['merlin'],
      \ 'ocaml': ['merlin']
      \ }
let g:ale_fixers = {
      \ 'javascript': ['prettier'],
      \ 'javascript.jsx': ['prettier'],
      \ 'json': ['prettier'],
      \ 'typescript': ['prettier'],
      \ 'typescript.tsx': ['prettier'],
      \ 'elixir': ['mix_format', 'trim_whitespace'],
      \ 'reason': ['refmt'],
      \ 'ocaml': ['refmt'],
      \ 'python': ['yapf'],
      \ 'elm': ['elm-format']
      \ }
let g:ale_fix_on_save=1
let g:ale_linters_explicit = 1
let g:test#strategy = 'neovim'
"===================================WEB=========================================
Plug 'mattn/emmet-vim' "quick HTML expansion
let g:user_emmet_settings = {}
let g:user_emmet_settings['javascript'] =  {'extends': 'jsx'}
let g:user_emmet_settings['javascript.jsx'] =  {'extends': 'jsx'}
let g:user_emmet_settings['typescript'] =  {'extends': 'jsx'}
let g:user_emmet_settings['typescript.tsx'] =  {'extends': 'jsx'}
Plug 'elzr/vim-json' "Better JSON highlighting
let g:vim_json_syntax_conceal=0
"==================================ELIXIR=======================================
Plug 'elixir-lang/vim-elixir'
Plug 'slashmili/alchemist.vim'
augroup elixir
  au!
  au FileType elixir nn <buffer> <localleader>i :IEx<CR>
  au FileType elixir nn <buffer> <localleader>t :Mix test<CR>
  au FileType elixir nn <buffer> <localleader>x :Mix<Space>
  au FileType elixir nn <buffer> gd :ExDef<CR>
augroup END
"===================================ELM=========================================
Plug 'ElmCast/elm-vim', {'for': 'elm'}
let g:elm_setup_keybindings = 0
let g:elm_format_autosave=1
augroup elm
  au!
  au FileType elm setlocal tabstop=4 shiftwidth=4 softtabstop=4 foldmethod=indent
  au FileType elm nn <buffer> K :ElmShowDocs<CR>
  au FileType elm nn <buffer> <localleader>m :ElmMakeMain<CR>
  au FileType elm nn <buffer> <localleader>r :ElmRepl<CR>
augroup END
"===================================CLOJURE=====================================
Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-classpath'
Plug 'tpope/vim-salve'
Plug 'clojure-vim/async-clj-omni', {'for': ['clojure', 'clojurescript']}
Plug 'guns/vim-sexp', {'for': ['clojure', 'clojurescript']}
Plug 'tpope/vim-sexp-mappings-for-regular-people', {'for': ['clojure', 'clojurescript']}
Plug 'venantius/vim-cljfmt', {'for': ['clojure', 'clojurescript']}
let g:clojure_align_multiline_strings = 1
let g:clojure_align_subforms = 1
let g:clj_fmt_autosave = 0
augroup clojure
  au!
  au BufEnter build.boot set filetype=clojure
  au FileType clojure nn <buffer> <LocalLeader>C
        \ :Piggieback (figwheel-sidecar.repl-api/repl-env)
  au FileType clojure nn <buffer> <localleader>f :Cljfmt<CR>
augroup END
"===================================RUST========================================
Plug 'rust-lang/rust.vim', {'for': 'rust'}
"===================================RUBY========================================
Plug 'vim-ruby/vim-ruby', {'for': 'ruby'}
"==================================PYTHON=======================================
augroup python
  au!
  au FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4
  au FileType python nn <buffer> <localleader>f :0,$!yapf<CR>
augroup END
"===================================VIML========================================
Plug 'shougo/neco-vim'
Plug 'thinca/vim-themis'
Plug 'junegunn/vader.vim'
augroup vim
  au!
  au FileType vim,vader setlocal foldmethod=indent
  au FileType vim,vader setlocal keywordprg=:help
  au FileType vim,vader vn <buffer> <localleader>e :<C-u>echo eval(getline('.'))<CR>
  au FileType vim,vader nn <buffer> <localleader>e :echo eval(getline('.'))<CR>
  au FileType vader-result set wrap
augroup END
"===================================FSHARP======================================
Plug 'fsharp/vim-fsharp', {
      \ 'for': 'fsharp',
      \ 'do':  'make fsautocomplete',
      \}
"===================================ETC.========================================
Plug 'neo4j-contrib/cypher-vim-syntax'
Plug 'aquach/vim-http-client' "vim rest client
Plug 'jparise/vim-graphql' " graphql syntax support
Plug 'godlygeek/tabular' " allows formatting of markdown tables
Plug 'slim-template/vim-slim' " slim templating language support
Plug 'sotte/presenting.vim' " for powerpoint style presentations in vim
Plug 'plasticboy/vim-markdown' " better markdown support
let g:http_client_bind_hotkey=0
let g:http_client_json_ft='json'
let g:http_client_json_escape_utf=0
let g:http_client_result_vsplit=0
let g:http_client_focus_output_window=0
let g:vim_markdown_conceal = 0
let g:vim_markdown_no_extensions_in_markdown = 1
let g:vim_markdown_autowrite = 1
au! FileType markdown setlocal tw=80 foldmethod=indent spell
au! BufRead,BufNewFile *.rest set filetype=rest
au! FileType rest nn <buffer> <CR> :HTTPClientDoRequest<CR>
"=================================PLUG END======================================
call plug#end()
set background=light
colo pencil
let g:pencil_higher_contrast_ui = 0
let g:airline_theme='pencil'
filetype plugin indent on
syntax enable
" for showbreak
hi! NonText guifg=#337755
hi! link EndOfBuffer deusBg2
"===================================FAST=SEARCH=================================
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
"===================================KEYBINDINGS=================================
nn <BACKSPACE> :bp<CR>
" Leader mappings
nn <leader><leader> :b#<CR>
nn <leader>a :Lines<CR>
nn <leader>d :Vexplore! .<CR>
nn <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
" nn <leader>f :Files<CR>
nn <leader>g :Magit<CR>
nn <leader>j <C-]>
nn <leader>k :q<CR>
nn <silent> <leader>ld :ALEDetail<CR>
nn <silent> <leader>ln :ALENext<CR>
nn <silent> <leader>lp :ALEPrevious<CR>
nn <leader>n :tabe<CR>
nn <leader>oo :e ~/Documents/vimwiki/index.md<CR>
nn <leader>p :cw<CR>
nn <leader>q :qa!<CR>
nn <leader>rr :S/
nn <leader>ra :%S/
nn <leader>sk :split<CR>
nn <leader>sj :split<CR><C-W>j
nn <leader>sh :vsplit<CR>
nn <leader>sl :vsplit<CR><C-W>l
nn <silent> <leader>t :call OpenOrCreateTerminal()<CR>
nn <leader>vv :e ~/dotfiles/.vimrc<CR>
nn <leader>vo :e ~/.config/oni/config.tsx<CR>
nn <leader>vl :e ./.lvimrc<CR>
nn <leader>w :w<CR>
nn <leader>x mzgggqG`z
nn <leader>y :NeoSnippetEdit<CR>
nn <leader>z :set foldlevel=1<cr>
nn <leader><CR> :
nn <leader>' :Marks<CR>
" Open netrw for current file
nn - :Vexplore!<CR>
" Refresh netrw
au! FileType netrw nn <buffer> r :e .<CR>
" New file netrw
au! FileType netrw nn <buffer> i :silent !touch <C-R>=b:netrw_curdir<CR>/
" Window navigation
nn <C-j> <C-W>j
nn <C-k> <C-W>k
nn <C-h> <C-W>h
nn <C-l> <C-W>l
" Arrows navigate buffers
nn <Left> :vertical res -5<CR>
nn <Right> :vertical res +5<CR>
nn <Up> :res +5<CR>
nn <Down> :res -5<CR>
" fast macros
nnoremap Q @q
" very magic search
nn / /\v
nn ? ?\v
" (g)oto (d)efinition
" nn gd <C-]>
" Tab navigation
nn H gT
nn L gt
" One button cmds
nn ! :!
" I never really use command mode
nn q: :q
" Terminal stuff
tnoremap <Esc> <C-\><C-n>
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l
au TermOpen * setlocal nonumber norelativenumber bufhidden=hide
autocmd BufWinEnter,WinEnter term://* startinsert
" Local Vimrc
if filereadable('./.lvimrc')
  exec 'source ./.lvimrc'
endif
" Autoreload .vimrc
au! bufwritepost .vimrc source %
au! bufwritepost .lvimrc source %


" vim: set ft=vim:
